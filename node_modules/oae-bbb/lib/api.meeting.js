var _ = require('underscore');
var events = require('events');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');

var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;

var LibraryAPI = require('oae-library');

var MeetingAPI = require('oae-bbb');
var MeetingDAO = require('./internal/dao');
var MeetingCALL = require('./internal/call');
var MeetingConstants = require('./constants').MeetingConstants;

var PrincipalsDAO = require('oae-principals/lib/internal/dao');

var LIBRARY_INDEX_NAME = 'meetings:meetings';

var createMeeting = module.exports.createMeeting = function(ctx, displayName, description, welcomemessage, members, opts, record, duration, callback){
	var lastModified = Math.round(new Date().getTime()/1000);
	var id = "m:oae:" + lastModified.toString();
	visibility = AuthzConstants.visibility.PUBLIC;
	MeetingDAO.createMeeting(id, displayName, description, welcomemessage, visibility, record, duration, function(err,data){
		if (err) {
			return callback(err);
		}
		
		members[ctx.user().id] = MeetingConstants.roles.MANAGER;
		
		var meeting = {
			tenant: ctx.tenant(),
			id : id,
			displayName : displayName,
			description : description,
			welcomemessage : welcomemessage,
			lastModified	: lastModified,
			visibility : visibility,
			resourceType : 'meeting'
		};
		
		AuthzAPI.updateRoles(meeting.id, members, function(err) {
            if (err) {
                return callback(err);
            }
			_insertLibrary(_.keys(members), meeting, function(err) {
				if (err) {
					return callback(err);
				}

				MeetingAPI.emit(MeetingConstants.events.CREATED_MEETING, ctx, meeting, members);
				return callback(null, data);
			});
		});
	});
};

var getMeetings = module.exports.getMeetings = function(userID, callback){
	
	MeetingDAO.getMeetings(userID, function(err,data){
		if(err){
			return callback(err);
		}
	
		return callback(null,data);		
		
	});
};

var createBBBCall = module.exports.createBBBCall = function(meetingID, name, duration, record, welcomeMessage, meetingname, callback){
	
	MeetingCALL.createBBBCall(meetingID, name, duration, record, welcomeMessage, meetingname,function(err,data){
		if(err){
			
			return callback(err);
		}
		return callback(null,data);
	});
};

var _insertLibrary = function(principalIds, meeting, callback) {
	callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'principalIds': principalIds,
                'meetingId': meeting.id
            }, 'Error inserting meeting into principal libraries');
        }
    };

    if (principalIds.length === 0 || !meeting) {
        return callback();
    }

    var effectiveLibraryVisibilities = LibraryAPI.Authz.resolveEffectiveLibraryVisibilities(principalIds, meeting);
    LibraryAPI.Index.insert(LIBRARY_INDEX_NAME, effectiveLibraryVisibilities, meeting.id, meeting.lastModified, callback);
};
