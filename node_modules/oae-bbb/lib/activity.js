var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');

var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzUtil = require('oae-authz/lib/util');

var MeetingAPI = require('./api');
var MeetingConstants = require('./constants').MeetingConstants;
var MeetingDAO = require('./internal/dao');

var TenantsUtil = require('oae-tenants/lib/util');

ActivityAPI.registerActivityType(MeetingConstants.activity.ACTIVITY_MEETING_CREATE, {
    'groupBy': [{'actor': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self', 'followers'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['members']
            }
        }
	}
});
MeetingAPI.on(MeetingConstants.events.CREATED_MEETING, function(ctx, meeting, members) {
	 var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('meeting', meeting.id, {'meeting': meeting});
	var activitySeed = new ActivityModel.ActivitySeed(MeetingConstants.activity.ACTIVITY_MEETING_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
 	ActivityAPI.postActivity(ctx, activitySeed);
});
var meetingProducer = function(resource, callback) {
	 return callback(null, createPersistentMeetingActivityEntity(resource.resourceData.meeting));
};
var createPersistentMeetingActivityEntity = function(meeting) {
	var persistentEntity = {'objectType': 'meeting', 'meeting': meeting};
    persistentEntity[ActivityConstants.properties.OAE_ID] = meeting.id;
	return persistentEntity;
};
var meetingTransformer = function(ctx, activityEntities, callback) {
	var transformedActivityEntities = {};
	var allRevisionIds = [];
    _.each(activityEntities, function(entities, activityId) {
	    transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.each(entities, function(entity, entityId) {
            // Transform the persistent entity into an ActivityStrea.ms compliant format
           	transformedActivityEntities[activityId][entityId] = transformPersistentMeetingActivityEntity(ctx, entity);
		});
    });
    return callback(null, transformedActivityEntities);
};
var transformPersistentMeetingActivityEntity = function(ctx, entity) {
    var meeting = entity.meeting;
	var id = meeting.id;
	var displayName = meeting.displayName;	
	var visibility = meeting.visibility;
	    
	// Generate URLs for this activity
    var tenant = ctx.tenant();
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    var globalId = baseUrl + '/api/meeting/' + id;
    var resource = AuthzUtil.getResourceFromId(id);
	 var profileUrl = baseUrl + '/meeting/' + resource.tenantAlias + '/' + resource.resourceId;

    var opts = {};
    opts.url = profileUrl;
	
    opts.displayName =  displayName;
    opts.ext = {};
	
    opts.ext[ActivityConstants.properties.OAE_ID] =  id;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] =  visibility;
    return new ActivityModel.ActivityEntity('meeting', globalId, opts);
};
var meetingInternalTransformer = function(ctx, activityEntities, callback) {
	console.log("en meetingInternetTransformer");
    var transformedActivityEntities = {};

    var allRevisionIds = [];
    _.each(activityEntities, function(entities, activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.each(entities, function(entity, entityId) {
            // Transform the persistent entity into the OAE model
            transformedActivityEntities[activityId][entityId] = entity.meeting;
        });
    });
    return callback(null, transformedActivityEntities);
};
ActivityAPI.registerActivityEntityType('meeting', {
    'producer': meetingProducer,
    'transformer': {
        'activitystreams': meetingTransformer,
        'internal': meetingInternalTransformer
    },
    'propagation': function(associationsCtx, entity, callback) {
	    ActivityUtil.getStandardResourcePropagation(entity.meeting.visibility, AuthzConstants.joinable.NO, callback);
    }
});

ActivityAPI.registerActivityEntityAssociation('meeting', 'self', function(associationsCtx, entity, callback) {
    return callback(null, [entity[ActivityConstants.properties.OAE_ID]]);
});

ActivityAPI.registerActivityEntityAssociation('meeting', 'members-by-role', function(associationsCtx, entity, callback) {
    ActivityUtil.getAllAuthzMembersByRole(entity[ActivityConstants.properties.OAE_ID], callback);
});

ActivityAPI.registerActivityEntityAssociation('meeting', 'members', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }
        return callback(null, _.flatten(_.values(membersByRole)));
    });
});